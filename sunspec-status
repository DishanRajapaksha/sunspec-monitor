#!/usr/bin/perl

use Data::Dumper;
use Device::Modbus::TCP::Client;
use Getopt::Long;
use strict;


my $TIMEOUT = 10;
my $PORT = 502;
my $ADDRESS = 1;
my $address = $ADDRESS;

my $SUNSPEC_I_COMMON_BLOCK_START = 40000;
my $SUNSPEC_I_MODEL_BLOCK_START = 40069;
my $SUNSPEC_M_COMMON_BLOCK_START = 40121;
my $SUNSPEC_M_MODEL_BLOCK_START = 40188;
my $SE_I_BATTERY_BLOCK_START = 57600;

my %I_STATUS = ( 
    0=>'Unknown', 
    1=>'OFF', 
    2=>'SLEEPING',
    3=>'STARTING',
    4=>'ON (MPPT)',
    5=>'THROTTLED',
    6=>'SHUTTING DOWN',
    7=>'FAULT',
    8=>'STANDBY'
    );



# scale_value - scale input value using scale factor (SF)
#
sub scale_value(**) {
  my ($val,$sf) = @_;

  return $val * (10 ** $sf);
}


# dump_hash - print has contents to stdout
#
sub dump_hash(*) {
    my ($href) = @_;

    my $tmp = Dumper($href);
    $tmp =~ s/^.*?{//;
    $tmp =~ s/};\s*$//;
    print $tmp;
}

# float32 - unpack floating point number
#
sub float32(*){
    my ($data) = @_;

    my ($f_val)  = 0.0;

    if (unpack("N",$data) != 0) {
	my $bin_str = substr(unpack("B32",$data),16,16).substr(unpack("B32",$data),0,16);
	my $f_sgn  = substr($bin_str,0,1) == "1" ? -1 : 1;
	my $f_exp  = oct("0b".substr($bin_str,1,8));
	my $f_man  = 1+oct("0b".substr($bin_str,9,23))*(2**-23);
	$f_val  = $f_sgn * (2**($f_exp-127)) * $f_man;
    }

    return $f_val;
}

# get_inverter_common_block - return a hash containing Sunspec
#                             Common Block values
#
sub get_inverter_common_block(*) {
    my ($ctx) = @_;

    my $req = $ctx->read_holding_registers(unit=>$address,
					   address=>$SUNSPEC_I_COMMON_BLOCK_START,
					   quantity=>69);
    $ctx->send_request($req) || die("send_request(): failed");

    my $adu = $ctx->receive_response();
    die("Read of Common block registers failed (device does not support SunSpec?)")
    	unless ($adu->success);


    my $data = pack("n*",@{$adu->values});
    my $cb;
    $cb->{C_SunSpec_ID} = unpack("a4",substr($data,0,4));
    $cb->{C_SunSpec_DID} = unpack("n",substr($data,4,2));
    $cb->{C_SunSpec_Length} = unpack("n",substr($data,6,2));
    $cb->{C_Manufacturer} = unpack("a*",substr($data,8,32));
    $cb->{C_Manufacturer} =~ s/\0+$//; 
    $cb->{C_Model} = unpack("a*",substr($data,40,32));
    $cb->{C_Model} =~ s/\0+$//; 
    $cb->{C_Version} = unpack("a*",substr($data,88,16));
    $cb->{C_Version} =~ s/\0+$//; 
    $cb->{C_SerialNumber} = unpack("a*",substr($data,104,32));
    $cb->{C_SerialNumber} =~ s/\0+$//; 
    $cb->{C_DeviceAddress} = unpack("n",substr($data,136,2));

    
    die("Non SunSpec common block received (not SunSpec compliant device?)")
    	     unless ($cb->{C_SunSpec_ID} eq "SunS" && $cb->{C_SunSpec_DID} == 1);

    return $cb;
}


# get_inverter_model_block - return a hash containing Sunspec Inverter
#                            Model Block values
#
sub get_inverter_model_block(*) {
    my ($ctx) = @_;

    my $req = $ctx->read_holding_registers(unit=>$address,
					   address=>$SUNSPEC_I_MODEL_BLOCK_START,
					   quantity=>52);
    $ctx->send_request($req) || die("send_request(): failed");

    my $adu = $ctx->receive_response();
    die("Read of Inverter Model block registers failed (device does not support SunSpec?)")
    	unless ($adu->success);


    my $data = pack("n*",@{$adu->values});
    my $mb;
    $mb->{C_SunSpec_DID} = unpack("n",substr($data,0,2));
    $mb->{C_SunSpec_Length} = unpack("n",substr($data,2,2));
    $mb->{I_AC_Current} = unpack("n",substr($data,4,2));
    $mb->{I_AC_CurrentA} = unpack("n",substr($data,6,2));
    $mb->{I_AC_CurrentB} = unpack("n",substr($data,8,2));
    $mb->{I_AC_CurrentC} = unpack("n",substr($data,10,2));
    $mb->{I_AC_Current_SF} = unpack("n!",substr($data,12,2));
    $mb->{I_AC_VoltageAB} = unpack("n",substr($data,14,2));
    $mb->{I_AC_VoltageBC} = unpack("n",substr($data,16,2));
    $mb->{I_AC_VoltageCA} = unpack("n",substr($data,18,2));
    $mb->{I_AC_VoltageAN} = unpack("n",substr($data,20,2));
    $mb->{I_AC_VoltageBN} = unpack("n",substr($data,22,2));
    $mb->{I_AC_VoltageCN} = unpack("n",substr($data,24,2));
    $mb->{I_AC_Voltage_SF} = unpack("n!",substr($data,26,2));
    $mb->{I_AC_Power} = unpack("n!",substr($data,28,2));
    $mb->{I_AC_Power_SF} = unpack("n!",substr($data,30,2));
    $mb->{I_AC_Frequency} = unpack("n",substr($data,32,2));
    $mb->{I_AC_Frequency_SF} = unpack("n!",substr($data,34,2));
    $mb->{I_AC_VA} = unpack("n!",substr($data,36,2));
    $mb->{I_AC_VA_SF} = unpack("n!",substr($data,38,2));
    $mb->{I_AC_VAR} = unpack("n!",substr($data,40,2));
    $mb->{I_AC_VAR_SF} = unpack("n!",substr($data,42,2));
    $mb->{I_AC_PF} = unpack("n!",substr($data,44,2));
    $mb->{I_AC_PF_SF} = unpack("n!",substr($data,46,2));
    $mb->{I_AC_Energy_WH} = unpack("N",substr($data,48,4));
    $mb->{I_AC_Energy_WH_SF} = unpack("n!",substr($data,52,2));
    $mb->{I_DC_Current} = unpack("n",substr($data,54,2));
    $mb->{I_DC_Current_SF} = unpack("n!",substr($data,56,2));
    $mb->{I_DC_Voltage} = unpack("n",substr($data,58,2));
    $mb->{I_DC_Voltage_SF} = unpack("n!",substr($data,60,2));
    $mb->{I_DC_Power} = unpack("n!",substr($data,62,2));
    $mb->{I_DC_Power_SF} = unpack("n!",substr($data,64,2));
    # 40103 unused
    $mb->{I_Temp_Sink} = unpack("n!",substr($data,68,2));
    # 40105-40106 unused
    $mb->{I_Temp_Sink_SF} = unpack("n!",substr($data,74,2));
    $mb->{I_Status} = unpack("n",substr($data,76,2));
    $mb->{I_Status_Vendor} = unpack("n",substr($data,78,2));
    $mb->{I_Event_1} = unpack("N",substr($data,80,4));
    $mb->{I_Event_2} = unpack("N",substr($data,84,4));
    $mb->{I_Event_1_Vendor} = unpack("N",substr($data,88,4));
    $mb->{I_Event_2_Vendor} = unpack("N",substr($data,92,4));
    $mb->{I_Event_3_Vendor} = unpack("N",substr($data,96,4));
    $mb->{I_Event_4_Vendor} = unpack("N",substr($data,100,4));

    warn("Non SunSpec Model block received (not SunSpec compliant device?)")
	unless ($mb->{C_SunSpec_Length} >= 50);

    return $mb;
}

###################################################################################
# main program

$Data::Dumper::Sortkeys=1;

my $verbose_mode = 0;
my $debug_mode = 0;
my $numeric_mode = 0;
my $json_mode = 0;
my $phase;
my $phase_tag;
my $meter;
my $battery = 0;
my $port = $PORT;
my $timeout = $TIMEOUT;
my $outfile;
my @meters;

GetOptions("verbose|v" => \$verbose_mode,
	   "battery|b" => \$battery,
	   "debug|d" => \$debug_mode,
	   "port|p=s" => \$port,
	   "address|a=s" => \$address,
	   "phase|P=s" => \$phase,
	   "meter|m=s" => \$meter,
	   "numeric|n" => \$numeric_mode,
	   "json|j" => \$json_mode,
	   "timeout|t=s" => \$timeout,
           "output|o=s" => \$outfile);

my $host = shift;

unless ($host) {
  print STDERR "syntax: $0 [options] <host>\n\n",
    "Options:\n",
    " --port=<port>, -p <port>            Use port (default $PORT)\n",
    " --address=<addr>, -a <addr>         Modbus Address (default $ADDRESS)\n",
    " --meter=<meter>, -m <meter>         Query meter (default 1) \n",
    "                                     (meter = 1..3  or 0 = no meter)\n",
    " --phase=<phase>, -P <phase>         Report single phase (default is average)\n",
    "                                     (phase = A,B,C)\n",
    " --battery, b                        Query battery status\n",
    " --numeric, -n                       Numeric output mode (time, status)\n",
    " --json, -j                          Output in JSON (instead of CSV) format\n",
    " --timeout=<sec>, -t <sec>           Timeout (default $TIMEOUT)\n",
    " --output=<filename>, -o <filename>  Append results to a file\n",
    " --verbose, -v                       Verbose mode\n",
    " --debug, -d                         Debug mode\n\n";
  exit(1);
}

die("invalid port ($port) specified") unless ($port > 0 && $port < 65536);
if ($meter ne '') {
    my @tmp = split(/\s*,\s*/,$meter);
    
    for my $i (0..$#tmp) {
	my $m = int($tmp[$i]);
	die("invalid meter specified: $tmp[$i]")  unless ($m >= 0 && $m <= 3);
	if ($m == 0) {
	    undef @meters;
	    last;
	}
	push @meters, $m;
    }
} else {
    # default to read first (built-in) meter
    push @meters, 1;
}

die("invalid phase ($phase) specified") unless ($phase =~ /^(A|B|C|)$/);
if ($phase) {
    $phase_tag='_'.$phase;
    $phase=" (Phase $phase)";
}

my $outfile_fh;
if ($outfile) {
    open($outfile_fh,'>>',$outfile) || die("failed to open output file for writing: $outfile");
} else {
    open($outfile_fh,">&STDOUT") || die("failed to open stdout");
}

my $c = Device::Modbus::TCP::Client->new(host=>$host,port=>$port,timeout=>$timeout);
my $tstamp = time();
my $cb = get_inverter_common_block($c);

my $fw_ver = $cb->{C_Version};

$fw_ver =~ s/^0+//;

if ($verbose_mode) {
  print "INVERTER:\n";
  print "             Model: $cb->{C_Manufacturer} $cb->{C_Model}\n";
  print "  Firmware version: $fw_ver\n";
  print "     Serial Number: $cb->{C_SerialNumber}\n";
  dump_hash($cb) if ($debug_mode);
  print "\n";
}


my $mb = get_inverter_model_block($c);

my $status = $I_STATUS{$mb->{I_Status}};
my $ac_power = scale_value($mb->{I_AC_Power},$mb->{I_AC_Power_SF});
my $dc_power = scale_value($mb->{I_DC_Power},$mb->{I_DC_Power_SF});
my $temp = scale_value($mb->{I_Temp_Sink},$mb->{I_Temp_Sink_SF});
my $eff = ($dc_power > 0 ? $ac_power/$dc_power*100 : 0);
my $dc_v = scale_value($mb->{I_DC_Voltage},$mb->{I_DC_Voltage_SF});
my $ac_v = scale_value($mb->{I_AC_VoltageAB},$mb->{I_AC_Voltage_SF});
my $ac_i = scale_value($mb->{I_AC_Current},$mb->{I_AC_Current_SF});
my $dc_i = scale_value($mb->{I_DC_Current},$mb->{I_DC_Current_SF});
my $ac_f = scale_value($mb->{I_AC_Frequency},$mb->{I_AC_Frequency_SF});
my $wh = scale_value($mb->{I_AC_Energy_WH},$mb->{I_AC_Energy_WH_SF});


  print  "            Status: $status\n\n";
  printf(" Power Output (AC): %12.0f W\n",$ac_power);
  printf("  Power Input (DC): %12.0f W\n",$dc_power);
  printf("        Efficiency: %12.2f %\n",$eff);
  printf("  Total Production: %12.3f kWh\n",$wh/1000);
  printf("      Voltage (AC): %12.2f V (%.2f Hz)\n",$ac_v,$ac_f);
  printf("      Current (AC): %12.2f A\n",$ac_i);
  printf("      Voltage (DC): %12.2f V\n",$dc_v);
  printf("      Current (DC): %12.2f A\n",$dc_i);
  printf("       Temperature: %12.2f C (heatsink)\n",$temp);
  dump_hash($mb) if ($debug_mode);
  print "\n";

$c->disconnect;

# eof :-)
